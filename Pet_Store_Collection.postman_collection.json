{
	"info": {
		"_postman_id": "ee052350-bfd9-4f60-9da0-b5f5db8dbe5b",
		"name": "Pet Store Collection",
		"description": "### **The Collection based on the Pet Swagger Rest Api Practice page**\n\n*   Under the collection package User flow doing user creating calls and covering the automated test by postman automation\n*   Second package has the pet flow. Creating and checking the pet status. Also provided with the automation test by Postman\n    \n\n#### **HOW TO RUN ALL COLLECTION**\n\n*   Clicking the after the collection 3 dot, clicking the '**Run Collection'** section\n*   Then click the RUN COLLECTION blue button\n*   And than check the result",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8825836"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check Response Body Values\", function () {",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.message).to.eql(\"1299\");",
									"});",
									"",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ]",
									"};",
									"",
									"pm.test(\"Validate schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Validate schema with tv4\", () => {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"user_name\", \"FirstOsman\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1299,\n  \"username\": \"FirstOsman\",\n  \"firstName\": \"Osman\",\n  \"lastName\": \"Legend\",\n  \"email\": \"osman.legend@ottoman.com\",\n  \"password\": \"Great123\",\n  \"phone\": \"01299145399\",\n  \"userStatus\": 0\n}"
						},
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": [
						{
							"name": "Create User",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1299,\n  \"username\": \"FirstOsman\",\n  \"firstName\": \"Osman\",\n  \"lastName\": \"Legend\",\n  \"email\": \"osman.legend@ottoman.com\",\n  \"password\": \"Great123\",\n  \"phone\": \"01299145399\",\n  \"userStatus\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check Response Body Values\", function () {",
									"    pm.expect(jsonData.id).to.eql(1299);",
									"    pm.expect(jsonData.username).to.eql(\"FirstOsman\");",
									"});",
									"",
									"",
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"username\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"firstName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"lastName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"password\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"phone\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"userStatus\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"id\",",
									"    \"username\",",
									"    \"firstName\",",
									"    \"lastName\",",
									"    \"email\",",
									"    \"password\",",
									"    \"phone\",",
									"    \"userStatus\"",
									"  ]",
									"};",
									"",
									"pm.test(\"Validate schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/user/{{user_name}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{user_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check Response Body Values\", function () {",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.message).to.eql(\"1299\");",
									"});",
									"",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ]",
									"};",
									"",
									"pm.test(\"Validate schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"user_name\", \"SecondOsman\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1299,\n  \"username\": \"SecondOsman\",\n  \"firstName\": \"Osman\",\n  \"lastName\": \"Legend\",\n  \"email\": \"osman.legend@ottoman.com\",\n  \"password\": \"Great123\",\n  \"phone\": \"01299145399\",\n  \"userStatus\": 1\n}"
						},
						"url": {
							"raw": "{{url}}/user/{{user_name}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{user_name}}"
							]
						}
					},
					"response": [
						{
							"name": "Update User",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1299,\n  \"username\": \"SecondOsman\",\n  \"firstName\": \"Osman\",\n  \"lastName\": \"Legend\",\n  \"email\": \"osman.legend@ottoman.com\",\n  \"password\": \"Great123\",\n  \"phone\": \"01299145399\",\n  \"userStatus\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/user/{{user_name}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"{{user_name}}"
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check Response Body Values\", function () {",
									"    pm.expect(jsonData.id).to.eql(1299);",
									"    pm.expect(jsonData.username).to.eql(\"SecondOsman\");",
									"});",
									"",
									"",
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"username\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"firstName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"lastName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"password\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"phone\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"userStatus\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"id\",",
									"    \"username\",",
									"    \"firstName\",",
									"    \"lastName\",",
									"    \"email\",",
									"    \"password\",",
									"    \"phone\",",
									"    \"userStatus\"",
									"  ]",
									"};",
									"",
									"pm.test(\"Validate schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/user/{{user_name}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{user_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check Response Body Values\", function () {",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.message).to.eql(\"SecondOsman\");",
									"});",
									"",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ]",
									"};",
									"",
									"pm.test(\"Validate schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/user/{{user_name}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{user_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Check Response Body Values\", function () {",
									"    pm.expect(jsonData.code).to.eql(1);",
									"    pm.expect(jsonData.message).to.eql(\"User not found\");",
									"});",
									"",
									"pm.collectionVariables.unset(\"user_name\");",
									"pm.collectionVariables.unset(\"user_id\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/user/{{user_name}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{user_name}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "#### **The Flow for the User Creating:**\n\n*   The calls are covering creating user with POST\n*   Reading the created user with GET\n*   Updating the user with PUT\n*   Again getting the updated user with GET\n*   Deleting the user with DELETE\n*   After all it's deleting and getting all deleted info with GET"
		},
		{
			"name": "Pet",
			"item": [
				{
					"name": "Create Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Check Response Body Values\", function () {",
									"    pm.expect(jsonData.id).to.eql(5354);",
									"    pm.expect(jsonData.category.id).to.eql(50);",
									"    pm.expect(jsonData.category.name).to.eql(\"dog\");",
									"    pm.expect(jsonData.status).to.eql(\"available\");",
									"});",
									"pm.collectionVariables.set(\"pet_id\", jsonData.id);",
									"",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"category\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"name\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"id\",",
									"                \"name\"",
									"            ]",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"photoUrls\": {",
									"            \"type\": \"array\",",
									"            \"items\": [",
									"                {",
									"                    \"type\": \"string\"",
									"                }",
									"            ]",
									"        },",
									"        \"tags\": {",
									"            \"type\": \"array\",",
									"            \"items\": [",
									"                {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"id\": {",
									"                            \"type\": \"integer\"",
									"                        },",
									"                        \"name\": {",
									"                            \"type\": \"string\"",
									"                        }",
									"                    },",
									"                    \"required\": [",
									"                        \"id\",",
									"                        \"name\"",
									"                    ]",
									"                }",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"type\": \"string\"",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"category\",",
									"        \"name\",",
									"        \"photoUrls\",",
									"        \"tags\",",
									"        \"status\"",
									"    ]",
									"};",
									"",
									"pm.test(\"Validate schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 5354,\n    \"category\": {\n        \"id\": 50,\n        \"name\": \"dog\"\n    },\n    \"name\": \"dogger\",\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 10,\n            \"name\": \"dogdog\"\n        }\n    ],\n    \"status\": \"available\"\n}"
						},
						"url": {
							"raw": "{{url}}/pet",
							"host": [
								"{{url}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Create Pet",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
								},
								"url": {
									"raw": "{{url}}/pet",
									"host": [
										"{{url}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Check Response Body Values\", function () {",
									"    pm.expect(jsonData.id).to.eql(5354);",
									"    pm.expect(jsonData.category.id).to.eql(50);",
									"    pm.expect(jsonData.category.name).to.eql(\"dog\");",
									"    pm.expect(jsonData.status).to.eql(\"available\");",
									"});",
									"",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"category\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"name\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"id\",",
									"                \"name\"",
									"            ]",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"photoUrls\": {",
									"            \"type\": \"array\",",
									"            \"items\": [",
									"                {",
									"                    \"type\": \"string\"",
									"                }",
									"            ]",
									"        },",
									"        \"tags\": {",
									"            \"type\": \"array\",",
									"            \"items\": [",
									"                {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"id\": {",
									"                            \"type\": \"integer\"",
									"                        },",
									"                        \"name\": {",
									"                            \"type\": \"string\"",
									"                        }",
									"                    },",
									"                    \"required\": [",
									"                        \"id\",",
									"                        \"name\"",
									"                    ]",
									"                }",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"type\": \"string\"",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"category\",",
									"        \"name\",",
									"        \"photoUrls\",",
									"        \"tags\",",
									"        \"status\"",
									"    ]",
									"};",
									"",
									"pm.test(\"Validate schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/pet/{{pet_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pet",
								"{{pet_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Check Response Body Values\", function () {",
									"    pm.expect(jsonData.id).to.eql(5354);",
									"    pm.expect(jsonData.category.id).to.eql(50);",
									"    pm.expect(jsonData.name).to.eql(\"caties\");",
									"    pm.expect(jsonData.status).to.eql(\"pending\");",
									"});",
									"pm.collectionVariables.set(\"pet_id\", jsonData.id);",
									"",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"category\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"name\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"id\",",
									"                \"name\"",
									"            ]",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"photoUrls\": {",
									"            \"type\": \"array\",",
									"            \"items\": [",
									"                {",
									"                    \"type\": \"string\"",
									"                }",
									"            ]",
									"        },",
									"        \"tags\": {",
									"            \"type\": \"array\",",
									"            \"items\": [",
									"                {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"id\": {",
									"                            \"type\": \"integer\"",
									"                        },",
									"                        \"name\": {",
									"                            \"type\": \"string\"",
									"                        }",
									"                    },",
									"                    \"required\": [",
									"                        \"id\",",
									"                        \"name\"",
									"                    ]",
									"                }",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"type\": \"string\"",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"category\",",
									"        \"name\",",
									"        \"photoUrls\",",
									"        \"tags\",",
									"        \"status\"",
									"    ]",
									"};",
									"",
									"pm.test(\"Validate schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 5354,\n  \"category\": {\n    \"id\": 50,\n    \"name\": \"string\"\n  },\n  \"name\": \"caties\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"pending\"\n}"
						},
						"url": {
							"raw": "{{url}}/pet",
							"host": [
								"{{url}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Update Pet",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 5354,\n  \"category\": {\n    \"id\": 50,\n    \"name\": \"cat\"\n  },\n  \"name\": \"caties\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"pending\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/pet",
									"host": [
										"{{url}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get Pet After Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Check Response Body Values\", function () {",
									"    pm.expect(jsonData.id).to.eql(5354);",
									"    pm.expect(jsonData.category.id).to.eql(50);",
									"    pm.expect(jsonData.name).to.eql(\"caties\");",
									"    pm.expect(jsonData.status).to.eql(\"pending\");",
									"});",
									"",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"category\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"name\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"id\",",
									"                \"name\"",
									"            ]",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"photoUrls\": {",
									"            \"type\": \"array\",",
									"            \"items\": [",
									"                {",
									"                    \"type\": \"string\"",
									"                }",
									"            ]",
									"        },",
									"        \"tags\": {",
									"            \"type\": \"array\",",
									"            \"items\": [",
									"                {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"id\": {",
									"                            \"type\": \"integer\"",
									"                        },",
									"                        \"name\": {",
									"                            \"type\": \"string\"",
									"                        }",
									"                    },",
									"                    \"required\": [",
									"                        \"id\",",
									"                        \"name\"",
									"                    ]",
									"                }",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"type\": \"string\"",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"category\",",
									"        \"name\",",
									"        \"photoUrls\",",
									"        \"tags\",",
									"        \"status\"",
									"    ]",
									"};",
									"",
									"pm.test(\"Validate schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/pet/{{pet_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pet",
								"{{pet_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check Response Body Values\", function () {",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.message).to.eql(\"5354\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/pet/{{pet_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pet",
								"{{pet_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete Pet",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/pet/{{pet_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"pet",
										"{{pet_id}}"
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get Pet After Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Check Response Body Values\", function () {",
									"    pm.expect(jsonData.code).to.eql(1);",
									"    pm.expect(jsonData.message).to.eql(\"Pet not found\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/pet/{{pet_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pet",
								"{{pet_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "#### **Pet Flow Documentation:**\n\n*   The package covering the creating pet with POST\n*   Checking the created pet using GET\n*   Updating the existing pet with PUT\n*   Checking correct pet updated successfully with GET\n*   Deleting after all step creation done with DELETE\n*   And checking no data related with the cases with GET"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://petstore.swagger.io/v2"
		},
		{
			"key": "pet_id",
			"value": ""
		}
	]
}